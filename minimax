#include <limits.h>
#include <math.h>
#include <stdbool.h>
#include <copyOfPart1.c>
#include <ScoringFunctions.c>


int minimax (char board[][26], int n, int row, int col, int depth, int bestPossibleScore, int worstPossibleScore, bool maxPlayer, char compColour, char humanColour, int gameTurnCounter){		// status: true for maximizing player; false for minimizing player
	
		int winner = 0;
		if (depth == 0 || checkGameOver(board, n, &winner, gameTurnCounter)){
			return smartScore(board, n, row, col, compColour, humanColour, gameTurnCounter);
		}
		gameTurnCounter--;
		
		int score = 0;
		char scratchBoard[26][26];
		resetBoard(scratchBoard, board, n);
		
		if(maxPlayer){
			int maxScore = INT_MIN;
			int i = 0, j = 0;
			
			while(i < n){
				while(j < n){
					if (checkValidMove(scratchBoard, n, i, j, compColour)){
						score = minimax(scratchBoard, n, i, j, depth - 1, bestPossibleScore, worstPossibleScore, false, compColour, humanColour, gameTurnCounter);
						maxScore = fmax(maxScore, score);
						bestPossibleScore = fmax(bestPossibleScore, score);
						if (worstPossibleScore <= bestPossibleScore){
							break;
						}
						j++;
					}
				}
				i++;
				
			}
			return maxScore;
		}
		
		else {
			int minScore = INT_MAX;
			int i = 0, j = 0;
			
			while(i < n){
				while(j < n){
					if (checkValidMove(scratchBoard, n, i, j, humanColour)){
						score = minimax(scratchBoard, n, i, j, depth - 1, bestPossibleScore, worstPossibleScore, true, compColour, humanColour, gameTurnCounter);
						minScore = fmin (minScore, score);
						worstPossibleScore = fmin(worstPossibleScore, score);
						if(worstPossibleScore <= bestPossibleScore){
							break;
						}
					}
					j++;
				}
				i ++;
			}
			return minScore;
		}
		
	
}
